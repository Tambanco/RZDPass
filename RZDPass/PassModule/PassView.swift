//
//  PassView.swift
//  RZDPass
//
//  Created by tambanco ü•≥ on 01.03.2022.
//

import UIKit

class PassView: UIView {

    // MARK: - 1 layer
    let passShapeLayer: CAShapeLayer = {
        let layer = CAShapeLayer()
        return layer
    }()
    
    // MARK: - 2 layer
    let logoImage: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(systemName: "star")
        return imageView
    }()
    
    // –ê—ç—Ä–æ—ç–∫—Å–ø—Ä–µ—Å—Å
    let logoLabel: UILabel = {
        let label = UILabel()
        return label
    }()
    
    // –î–∞—Ç–∞ –ø–æ–µ–∑–¥–∫–∏
    let dateTitle: UILabel = {
        let label = UILabel()
        return label
    }()
    
    // –¥–∞—Ç–∞
    let dateLabel: UILabel = {
        let label = UILabel()
        return label
    }()
    
    // –ë–∏–ª–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –Ω–∞ –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–∞—Ö
    let validLabel: UILabel = {
        let label = UILabel()
        return label
    }()
    
    let trainImage: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(systemName: "tram.fill")
        return imageView
    }()
    
    // —Ç–∞—Ä–∏—Ñ
    let rateTitle: UILabel = {
        let label = UILabel()
        return label
    }()
    
    // —Å—Ç–∞–Ω–¥–∞—Ä—Ç
    let rateLabel: UILabel = {
        let label = UILabel()
        return label
    }()
    
    // —Å—Ç–æ–∏–º–æ—Å—Ç—å
    let costTitle: UILabel = {
        let label = UILabel()
        return label
    }()
    
    // –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    let costLabel: UILabel = {
        let label = UILabel()
        return label
    }()
    
    // –ø–∞—Å—Å–∞–∂–∏—Ä
    let passengerTitle: UILabel = {
        let label = UILabel()
        return label
    }()
    
    // –§–ò–û
    let passengerLable: UILabel = {
        let label = UILabel()
        return label
    }()
    
    // –¥–æ–∫—É–º–µ–Ω—Ç
    let docTitle: UILabel = {
        let label = UILabel()
        return label
    }()
    
    // –ø–∞—Å–ø–æ—Ä—Ç
    let docLable: UILabel = {
        let label = UILabel()
        return label
    }()
    
    // –¥–æ–∫—É–º–µ–Ω—Ç
    let passportTitle: UILabel = {
        let label = UILabel()
        return label
    }()
    
    // —Å–µ—Ä–∏—è –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞
    let numbersLable: UILabel = {
        let label = UILabel()
        return label
    }()
    
    //QR –∫–æ–¥
    let qrCode: UIImageView = {
        let imageView = UIImageView()
        imageView.image = UIImage(systemName: "tram.fill")
        return imageView
    }()
    
    
    override init(frame: CGRect) {
        super.init(frame: frame)
        backgroundColor = .darkGray
        
        layer.addSublayer(passShapeLayer)
        
        
        passShapeLayer.frame = bounds
        
        let path = UIBezierPath()
        path.move(to: CGPoint(x: 10, y: 160))
        path.addArc(withCenter: CGPoint(x: 20, y: 160), radius: 10, startAngle: Double.pi, endAngle: (Double.pi*3)/2, clockwise: true)
        path.addLine(to: CGPoint(x: 370, y: 150))
        path.addArc(withCenter: CGPoint(x: 370, y: 160), radius: 10, startAngle: Double.pi/2, endAngle: 0, clockwise: true)
        path.addLine(to: CGPoint(x: 380, y: 250))
        path.addArc(withCenter: CGPoint(x: 380, y: 260), radius: 5, startAngle: (Double.pi*3)/2, endAngle: Double.pi/2, clockwise: false)
        path.addLine(to: CGPoint(x: 380, y: 600))
        path.addArc(withCenter: CGPoint(x: 370, y: 600), radius: 10, startAngle: 0, endAngle: Double.pi/2, clockwise: true)
        path.addLine(to: CGPoint(x: 20, y: 610))
        path.addArc(withCenter: CGPoint(x: 20, y: 600), radius: 10, startAngle: Double.pi/2, endAngle: Double.pi, clockwise: true)
        path.addLine(to: CGPoint(x: 10, y: 270))
        path.addArc(withCenter: CGPoint(x: 10, y: 260), radius: 5, startAngle: Double.pi/2, endAngle: (Double.pi*3)/2, clockwise: false)
        
        passShapeLayer.path = path.cgPath
        passShapeLayer.fillColor = UIColor(rgb: 0x75140D).cgColor
        
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}
